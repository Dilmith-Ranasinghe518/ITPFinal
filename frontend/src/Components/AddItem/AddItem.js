import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import './AddItem.css'; // Importing external CSS file, if necessary
import Sidebar from '../SideBar/SideBar';



function AddItem() {
  const history = useNavigate();
  const [inputs, setInputs] = useState({
    name: "",
    category: "",
    unit: "kg",  // Default unit set to "kg"
    quantity: "",
    description: "",
  });
  const [errors, setErrors] = useState({
    name: "",
    unit: "",
    quantity: "",
    description: "",
  });

  const handleChange = (e) => {
    const { name, value } = e.target;

    // Validate input based on field name
    if (name === 'name') {
      if (isValidName(value)) {
        setInputs((prevState) => ({
          ...prevState,
          [name]: value,
        }));
      }
    } else if (name === 'quantity') {
      if (value === "" || isValidQuantity(value)) {
        // If the quantity exceeds 1000, automatically switch unit to MT
        if (value > 1000 && inputs.unit !== 'MT') {
          setInputs((prevState) => ({
            ...prevState,
            unit: 'MT',
          }));
        }
        setInputs((prevState) => ({
          ...prevState,
          [name]: value,
        }));
      }
    } else if (name === 'description') {
      if (isValidDescription(value)) {
        setInputs((prevState) => ({
          ...prevState,
          [name]: value,
        }));
      }
    } else {
      setInputs((prevState) => ({
        ...prevState,
        [name]: value,
      }));
    }
  };

  // Handle form submission
  const handleSubmit = (e) => {
    e.preventDefault();
    const validationErrors = validateForm();
    if (Object.values(validationErrors).every(error => error === "")) {
      sendRequest().then(() => history('/inventory'));
    } else {
      setErrors(validationErrors);
    }
  };

  // Send request to the API
  const sendRequest = async () => {
    await axios.post("http://localhost:5000/inventory", {
      name: String(inputs.name),
      category: String(inputs.category),
      unit: String(inputs.unit),
      quantity: Number(inputs.quantity),
      description: String(inputs.description),
    }).then(res => res.data);
  };

  // Validate the form before submission
  const validateForm = () => {
    const validationErrors = {};

    // Validate Name
    if (!/^[a-zA-Z\s]+$/.test(inputs.name)) {
      validationErrors.name = "Name cannot contain special characters.";
    } else if (/([a-zA-Z])\1{2,}/.test(inputs.name)) {
      validationErrors.name = "Name cannot have the same letter repeated more than twice.";
    } else if (inputs.name.length > 12) {
      validationErrors.name = "Name cannot exceed 12 characters.";
    }

    // Validate Unit
    if (inputs.unit !== "kg" && inputs.unit !== "MT") {
      validationErrors.unit = "Unit must be either 'kg' or 'MT'.";
    }

    // Validate Quantity (1 - 999999 or leading zeros like 000, 00, 0000, 00000)
    if (!/^[1-9][0-9]{0,5}$/.test(inputs.quantity) && !/^[0]{3,5}$/.test(inputs.quantity)) {
      validationErrors.quantity = "Quantity must be a number between 1 and 999999 or a valid number with leading zeros.";
    } else if (/^0[1-9]/.test(inputs.quantity)) {
      validationErrors.quantity = "Quantity cannot start with 0 followed by other digits.";
    }

    // Validate Description
    if (inputs.description.length > 200) {
      validationErrors.description = "Description cannot exceed 200 characters.";
    } else if (/^[^a-zA-Z]/.test(inputs.description)) {
      validationErrors.description = "Description cannot start with a special character or number.";
    }

    return validationErrors;
  };

  // 📝 Generate PDF Function
  const generatePDF = () => {
    const doc = new jsPDF();
    const currentDate = new Date().toLocaleString("en-LK", {
      timeZone: "Asia/Colombo",
      weekday: "long",
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      hour12: true
    });
    const userName = "Inventory Manager - D.Ranasinghe "; 

    // Title Section
    doc.setFontSize(16);
    doc.text("Clean Cycle", 14, 20);
    doc.setFontSize(12);
    doc.text("Address: 1234 Galle Municipal Council, Galle Road, Galle, Sri Lanka", 14, 28);
    doc.text("Email: contact@cleancycle.lk", 14, 34);
    doc.text("Telephone: +94 912 248 008", 14, 40);
    doc.text(`Report Generated by: ${userName}`, 14, 46);
    doc.text(`Date and Time of Report: ${currentDate}`, 14, 52);

    // Add some space before the next section
    doc.text(" ", 14, 58); // Adding space between sections

    // Inventory Details Section Title
    doc.setFontSize(14);
    doc.text("Inventory Adding Details", 14, 70); // Positioning the Inventory Details title

    // Table columns and data
    const tableColumn = ["Field", "Value"];
    const tableRows = [
      ["Name", inputs.name],
      ["Category", inputs.category],
      ["Unit", inputs.unit],
      ["Quantity", inputs.quantity],
      ["Description", inputs.description],
    ];

    // Adding space before the table
    doc.text(" ", 14, 90); // Space before the table

    // AutoTable for structured table with customized spacing
    doc.autoTable({
      head: [tableColumn],
      body: tableRows,
      startY: 100, // Start the table after a little space
    });

    // Save the PDF
    doc.save("InventoryAddInvoice.pdf");
};


  // Name Validation (Allow only letters and spaces, no special chars, and no 3 consecutive same letter)
  const isValidName = (value) => {
    if (/[^a-zA-Z\s]/.test(value)) return false; // Allow spaces, but no special chars
    if (/([a-zA-Z])\1{2,}/.test(value)) return false; // No consecutive same letter more than twice
    if (value.length > 12) return false; // Max 12 characters
    return true;
  };


  const handleKeyPress = (event) => {
    // If the user presses "-" key, prevent it
    if (event.key === "-") {
      event.preventDefault();
    }
  };

  // Quantity Validation (Only number between 1-999999, no repeating digits more than 3 times)
  const isValidQuantity = (value) => {
    // Prevent "-" character from being typed
  if (value.includes("-")) return false; // If "-" is included, return false immediately

    if (value === "") return true; // Allow empty value to clear the field
    if (!/^[1-9][0-9]{0,3}$/.test(value) && !/^[0]{3,3}$/.test(value)) return false; // Valid number between 1 and 999999 or zeros
    if (/^0[1-9]/.test(value)) return false; // Cannot start with 0 followed by other digits
    return true;
  };

  // Description Validation (Max 200 characters and cannot start with special chars or numbers)
  const isValidDescription = (value) => {
    if (value.length > 200) return false; // Max 200 characters
    if (/^[^a-zA-Z]/.test(value)) return false; // No starting with special char or number
    return true;
  };

  return (
    <div className="dashboard-container-form">
    {/* Sidebar Component */}
    <Sidebar />
    
    {/* Main Content Area - Renamed to inventoryFormContainer */}
    <div className="inventoryFormContainer">
    
      <h1 style={{ textAlign: "center", color: "#388e3c" }}>Add Inventory</h1>
      <form onSubmit={handleSubmit} style={{ display: "flex", flexDirection: "column", gap: "1rem" }}>
        <label>Name</label>
        <input
          type="text"
          name="name"
          onChange={handleChange}
          value={inputs.name}
          style={{ padding: "10px", borderRadius: "5px", border: "1px solid #ddd" }}
          required
        />
        {errors.name && <span style={{ color: "red", fontSize: "0.9rem" }}>{errors.name}</span>}
        
        <label>Category</label>
        <select
          name="category"
          onChange={handleChange}
          value={inputs.category}
          style={{ padding: "10px", borderRadius: "5px", border: "1px solid #ddd" }}
          required
        >
          <option value="">Select Category</option>
          <option value="Organic">Organic</option>
          <option value="Plastic">Plastic</option>
          <option value="Polythene">Polythene</option>
          <option value="Metal">Metal</option>
        </select>
        
        <label>Unit</label>
        <select
          name="unit"
          onChange={handleChange}
          value={inputs.unit}
          style={{ padding: "10px", borderRadius: "5px", border: "1px solid #ddd" }}
          required
        >
          <option value="kg">kg</option>
          <option value="MT">MT</option>
        </select>
        {errors.unit && <span style={{ color: "red", fontSize: "0.9rem" }}>{errors.unit}</span>}
        
        <label>Quantity</label>
           
       
           
           <input
          type="number"
          name="quantity"
          onChange={handleChange}
          onKeyDown={handleKeyPress} // Block the "-" key
          value={inputs.quantity}
          style={{ padding: "10px", borderRadius: "5px", border: "1px solid #ddd" }}
          required
        />
        {errors.quantity && <span style={{ color: "red", fontSize: "0.9rem" }}>{errors.quantity}</span>}
        
        <label>Description</label>
        <input
          type="text"
          name="description"
          onChange={handleChange}
          value={inputs.description}
          style={{ padding: "10px", borderRadius: "5px", border: "1px solid #ddd" }}
        />
        {errors.description && <span style={{ color: "red", fontSize: "0.9rem" }}>{errors.description}</span>}

        <button
          type="submit"
          style={{
            padding: "10px 20px",
            backgroundColor: "#66bb6a",
            color: "#fff",
            border: "none",
            borderRadius: "5px",
            cursor: "pointer",
            fontWeight: "bold",
            transition: "background-color 0.3s ease"
          }}
        >
          Submit
        </button>
      </form>

      <button
        onClick={generatePDF}
        style={{
          marginTop: "20px",
          padding: "10px 20px",
          backgroundColor: "#3498db",
          color: "#fff",
          border: "none",
          borderRadius: "5px",
          cursor: "pointer",
          fontWeight: "bold",
          transition: "background-color 0.3s ease"
        }}
      >
        Download PDF
      </button>
    </div>
    </div>
    
    
  );
}

export default AddItem;
